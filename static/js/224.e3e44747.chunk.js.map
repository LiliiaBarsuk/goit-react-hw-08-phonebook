{"version":3,"file":"static/js/224.e3e44747.chunk.js","mappings":"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","sources":["components/Filter/Filter.styled.js","components/Filter/Filter.js","components/ContactList/ContactList.styled.js","components/ContactList/ContactList.js","Pages/ContactsPage/ContactsPage.styled.js","components/ButtonAdd/ButtonAdd.styled.js","components/ButtonAdd/ButtonAdd.js","components/Modal/Modal.styled.js","components/ContactForm/ContactForm.styled.js","components/ContactForm/ContactForm.js","components/Modal/Modal.js","Pages/ContactsPage/ContactsPage.js","redux/contacts/selectors.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const Input = styled.input`\npadding: 5px;\nborder-radius: 4px;\nborder: none;\ncolor: #0A0D68;\nfont-size: 20px;\n`;\nexport const Label = styled.label`\ndisplay: flex;\nflex-direction: column;\ngap: 20px;\nfont-size: 30px;\nfont-weight: bold;\ncolor: #0A0D68;\n`;","import { useDispatch } from \"react-redux\";\nimport { setFilter } from \"../../redux/contacts/contactsSlice\";\nimport { Input, Label } from \"./Filter.styled\";\n\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  \n  const saveFilterValue = evt => {\n    dispatch(setFilter(evt.target.value))\n  };\n\n  return (\n    <Label>\n      Find contact by name\n      <Input name='filter' type='text' onChange={saveFilterValue}></Input>\n    </Label>\n  )\n}\n","import styled from '@emotion/styled';\nimport { BsXLg } from \"react-icons/bs\";\nimport { NavLink } from 'react-router-dom';\n\nexport const Button = styled.button`\nwidth: 50px;\nheight: 50px;\npadding: 10px;\nmargin-left: auto;\ncolor: #0A0D68;\nfont-size: 16px;\nfont-weight: bold;\nbackground-color: transparent;\nborder-radius: 50%;\nborder: none;\n    box-shadow: 0px 1px 3px rgba(0, 0, 0, 0.12),\n        0px 1px 1px rgba(0, 0, 0, 0.14),\n        0px 2px 1px rgba(0, 0, 0, 0.2);\n\n`;\n\nexport const DelIcon = styled(BsXLg)`\n   width: 100%;\n   height: 100%;\n   fill: #0824AF;\n`;\n\nexport const Item = styled.li`\n    margin-bottom: 5px;\n    display: flex;\n    align-items: center;\n    justify-content: flex-start;\n    \n\n    &:not(:last-child) {\n        margin-bottom: 30px;\n    }\n\n`;\n\n\nexport const List = styled.ul`\n   margin-top: 40px;\n   \n`;\n\nexport const NavLinkStyled = styled(NavLink)`\n    color: #0A0D68;\n    font-size: 28px;\n    text-decoration: none;\n\n    \n`;\n\n\n","import { useSelector, useDispatch } from \"react-redux\";\nimport { useEffect } from \"react\";\nimport { fetchContacts } from \"redux/contacts/operations\";\nimport { deleteContact } from \"../../redux/contacts/operations\";\nimport { Button, DelIcon, Item, List, NavLinkStyled } from \"components/ContactList/ContactList.styled\";\nimport { getFilteredContacts } from \"redux/contacts/selectors\";\n\nexport const ContactList = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const contacts = useSelector(getFilteredContacts);\n  \n  function delContact(id) {\n    dispatch(deleteContact(id));\n  };\n  \n\n  return (\n    <>\n    <List>\n      {contacts.map(contact => (\n        <Item key={contact.id}>\n          <NavLinkStyled to={`${contact.id}`} >\n          {contact.name} </NavLinkStyled>\n          <Button type=\"button\" onClick={() => delContact(contact.id)}>\n            <DelIcon />\n          </Button>\n        </Item>\n      ))}  \n    </List>\n    </>\n  )\n}\n","import styled from \"@emotion/styled\";\n\nexport const ContactsContainer = styled.div`\ndisplay: flex;\npadding-bottom: 40px;\nheight: 100%;\nbackground: linear-gradient(90deg, rgba(32,142,221,1) 9%, rgba(88,192,243,0.9051995798319328) 37%, rgba(53,173,233,1) 79%);\n\n`;\n\nexport const Aside = styled.aside`\n\nwidth: 600px;\npadding: 40px;    \n`;\n","import styled from \"@emotion/styled\";\nimport { BsFillPersonPlusFill } from \"react-icons/bs\";\n\nexport const ButtonAddStyled = styled.button`\ndisplay: flex;\n    align-items: center;\n    justify-content: center;\n    margin-bottom: 20px;\n    width: 100%;\n    height: 50px;\n    border: none;\n    background-color: #0824AF;\n    border-radius: 4px;\n    padding: 35px;\n    color: #81CBEE;\nfont-family: sans-serif;\nfont-size: 30px;\nfont-weight: bold;\nbox-shadow: 0px 1px 3px rgba(0, 0, 0, 0.12),\n        0px 1px 1px rgba(0, 0, 0, 0.14),\n        0px 2px 1px rgba(0, 0, 0, 0.2);\n    \n`;\n\nexport const AddIcon = styled(BsFillPersonPlusFill)`\n   margin-right: 20px;\nwidth: 50px;\n   height: 50px; \n   fill: #81CBEE;\n`;","import { AddIcon, ButtonAddStyled } from \"./ButtonAdd.styled\";\n\nexport const ButtonAdd = ({ openModal }) => {\n    return (\n        <ButtonAddStyled onClick={() => openModal(true)}><AddIcon />Add new contact</ButtonAddStyled>\n    )\n}","import styled from \"@emotion/styled\";\n\nexport const Overlay = styled.div`\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100vw;\n    height: 100vh;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    background-color: rgba(0, 0, 0, 0.8);\n    z-index: 1200;\n`;\n\nexport const ModalStyled = styled.div`\n    color: #0A0D68;\n    max-width: calc(100vw - 48px);\n    min-width: 500px;\n    max-height: calc(100vh - 24px);\n    padding: 40px 30px;\n    border-radius: 4px;\n   \n    border: none;\n    box-shadow:\n    0px 1px 1px rgba(0, 0, 0, 0.12),\n    0px 4px 4px rgba(0, 0, 0, 0.06),\n    1px 4px 6px rgba(0, 0, 0, 0.16);\n    background: linear-gradient(90deg, rgba(32,142,221,1) 9%, rgba(88,192,243, 1) 37%, rgba(53,173,233,1) 79%);\n`;\n\nexport const Header = styled.h2`\n    text-align: center;\n    margin-bottom: 30px;\n    margin-left: auto;\n    margin-right: auto;\n    font-size: 30px;\n`;\n\n","import styled from '@emotion/styled';\nimport { ErrorMessage, Field, Form } from 'formik';\n\nexport const FormStyled = styled(Form)`\n    display: flex;\n    flex-direction: column;\n    width: 100%;\n    gap: 20px;\n`;\n\nexport const Label = styled.label`\n    display: flex;\n    flex-direction: column;\n    gap: 20px;\n    font-size: 24px;\n    font-weight: bold;\n`;\n\n\n\nexport const FieldStyled = styled(Field)`\n    padding: 5px;\n    border-radius: 4px;\n    border: none;\n    color: #0A0D68;\n    font-size: 20px;\n`;\n\nexport const ErrorMessageStyled = styled(ErrorMessage)`\n    font-size: 18px;\n    color: #9d3158;\n    margin-top: -10px;\n\n`;\n\nexport const Button = styled.button`\nmin-width: 150px;\nmargin-top: 22px;\nmargin-left: auto;\nmargin-right: auto;\npadding: 10px;\ncolor: #0824AF;\nfont-size: 16px;\nfont-weight: bold;\nbackground-color: transparent;\nborder-radius: 4px;\nborder: 1px solid #0824AF;\n box-shadow: 0px 1px 3px rgba(0, 0, 0, 0.12),\n        0px 1px 1px rgba(0, 0, 0, 0.14),\n        0px 2px 1px rgba(0, 0, 0, 0.2);\n\n`\n","import { Formik } from 'formik';\nimport * as yup from 'yup';\nimport { Button, FormStyled, Label,  FieldStyled,  ErrorMessageStyled } from './ContactForm.styled';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { addContact } from \"../../redux/contacts/operations\";\nimport { getContacts } from 'redux/contacts/selectors';\nimport { toast } from 'react-toastify';\n\nconst schema = yup.object().shape({\n    name: yup.string().min(2, \"Too Short!\")\n    .max(50, \"Too Long!\")\n    .required(\"Name is required\").matches(\n      \"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\", \n      \"Error! Name may contain only letters, apostrophe, dash and spaces.\"\n    ), \n    number:  yup.string().required(\"Phone number is required\").matches(\n      \"\\\\+?\\\\d{1,4}?[-.\\\\s]?\\\\(?\\\\d{1,3}?\\\\)?[-.\\\\s]?\\\\d{1,4}[-.\\\\s]?\\\\d{1,4}[-.\\\\s]?\\\\d{1,9}\", \n      \"Error! Phone number must be digits and can contain spaces, dashes, parentheses and can start with +.\"\n    ),  \n  });\n\nconst initialValues = {\n    name: '',\n    number: '',\n  }\n  \nexport const ContactForm = ({ closeModal }) => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(getContacts)\n\n  const handleSubmit = (values, {resetForm}) => {\n    const newName = values.name.toLowerCase();\n    const nameExist = contacts.map(contact => contact.name.toLowerCase()).some(el => el === newName);\n\n    if (nameExist) {\n       toast.error(\"A contact with that name already exists.\");   \n    }\n  \n    dispatch(addContact(values));\n    resetForm();\n    closeModal();\n  };\n\n\n  return (\n    <Formik initialValues={initialValues} validationSchema={schema} onSubmit={handleSubmit}>\n      <FormStyled>\n        <Label >\n          Name\n           <FieldStyled type=\"text\" name=\"name\" />\n           < ErrorMessageStyled name=\"name\" component=\"span\"/>\n        </Label>\n        <Label >\n          Phone number\n          <FieldStyled type=\"tel\" name=\"number\" />\n          < ErrorMessageStyled name=\"number\" component=\"span\"/>\n        </Label>\n        <Button type=\"submit\">Add contact</Button>\n        \n      </FormStyled>\n    </Formik>  \n  )\n\n}\n\n","import { useEffect } from \"react\";\nimport { createPortal } from \"react-dom\";\nimport { Header, ModalStyled, Overlay } from \"./Modal.styled\";\nimport { ContactForm } from \"components/ContactForm/ContactForm\";\n\nconst modalRoot = document.querySelector('#modal-root');\n\nexport const Modal = ({ closeModal }) => {\n\n    const closeByKeyDown = e => {\n        if(e.code === 'Escape') {\n            closeModal(false);\n        } \n    }\n\n    const closeByClickOnBackdrop = e => {\n        if(e.target === e.currentTarget) {\n            closeModal(false);\n        }\n    }\n\n    useEffect(() => {\n        window.addEventListener('keydown', closeByKeyDown);\n        \n        return () => { window.removeEventListener('keydown', closeByKeyDown) };\n    })\n   \n        return createPortal(\n            <Overlay onClick={closeByClickOnBackdrop}>\n                <ModalStyled>\n                    <Header>Fill the details of the new contact</Header>\n                    <ContactForm closeModal={closeModal} />\n                </ModalStyled>\n            </Overlay>,\n            modalRoot\n        )\n};\n\n","import { Filter } from \"components/Filter/Filter\";\nimport { ContactList } from \"components/ContactList/ContactList\";\nimport { Aside, ContactsContainer } from \"./ContactsPage.styled\";\nimport { ButtonAdd } from \"components/ButtonAdd/ButtonAdd\";\nimport { Modal } from \"components/Modal/Modal\";\nimport { Outlet } from \"react-router-dom\";\nimport { useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { getError, getIsLoading } from \"redux/contacts/selectors\";\nimport { FallingLines } from \"react-loader-spinner\";\n\nconst ContactsPage = () => {\n    const [isModalOpen, setIsModalOpen] = useState(false);  \n    \n    const isLoading = useSelector(getIsLoading);\n    const error = useSelector(getError);\n\n    return (\n        <>\n        <ContactsContainer>\n            <Aside>\n                <ButtonAdd openModal={setIsModalOpen} />  \n                <Filter />\n      \n                    {isLoading && !error && <FallingLines \n                        color=\"#0824AF\"\n                        width=\"100\"\n                        visible={true}\n                        ariaLabel='falling-lines-loading'\n                    />}\n                <ContactList /> \n            </Aside>\n        \n\n        <Outlet />\n         {isModalOpen && <Modal closeModal={setIsModalOpen}/>}\n        </ContactsContainer>\n       \n\n        </>\n    )\n};\n\nexport default ContactsPage;\n","import { createSelector } from \"@reduxjs/toolkit\";\n\nexport const getContacts = state => state.contacts.items;\nexport const getFilter = state => state.contacts.filterValue;\nexport const getIsLoading = state => state.contacts.isLoading;\nexport const getError = state => state.contacts.error;\n\nexport const getFilteredContacts = createSelector(\n    [getContacts, getFilter], (contacts, filter) => {\n\n    if (!filter) {\n      return contacts\n    }\n    return contacts.filter(contact => contact.name.toLowerCase().includes(filter));\n  \n});\n\nexport const getModalState = state => state.contacts.isModalOpen;\n\n\n"],"names":["Input","styled","Label","Filter","dispatch","useDispatch","name","type","onChange","evt","setFilter","target","value","Button","DelIcon","BsXLg","Item","List","NavLinkStyled","NavLink","ContactList","useEffect","fetchContacts","contacts","useSelector","getFilteredContacts","map","contact","to","id","onClick","deleteContact","ContactsContainer","Aside","ButtonAddStyled","AddIcon","BsFillPersonPlusFill","ButtonAdd","openModal","Overlay","ModalStyled","Header","FormStyled","Form","FieldStyled","Field","ErrorMessageStyled","ErrorMessage","schema","yup","shape","min","max","required","matches","number","initialValues","ContactForm","closeModal","getContacts","validationSchema","onSubmit","values","resetForm","newName","toLowerCase","some","el","toast","addContact","component","modalRoot","document","querySelector","Modal","closeByKeyDown","e","code","window","addEventListener","removeEventListener","createPortal","currentTarget","useState","isModalOpen","setIsModalOpen","isLoading","getIsLoading","error","getError","color","width","visible","ariaLabel","state","items","createSelector","filterValue","filter","includes"],"sourceRoot":""}